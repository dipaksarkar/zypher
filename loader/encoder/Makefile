CC = gcc
CXX = g++
CFLAGS = -Wall -Wextra -Werror -g -O2 -I. -I../include -I/usr/local/include -I/usr/include
LDFLAGS = -L/usr/local/lib -L/usr/lib -lssl -lcrypto

# Directories
SRCDIR = src
INCLUDEDIR = include
BUILDDIR = build
BINDIR = bin

# Target executable
TARGET = $(BINDIR)/zypher

# All source files
SOURCES = $(wildcard $(SRCDIR)/*.c)

# Object files
OBJECTS = $(SOURCES:$(SRCDIR)/%.c=$(BUILDDIR)/%.o)

# Ensure directories exist
$(shell mkdir -p $(BUILDDIR) $(BINDIR))

# Shared header file with constants
SHARED_HEADER = ../include/zypher_shared.h

# Master key file - autogenerated during build
MASTER_KEY_FILE = $(BUILDDIR)/.zypher_key

# Default rule
all: update_master_key $(TARGET)

# Generate or update the master key
update_master_key:
	@echo "Generating new master key..."
	@openssl rand -base64 32 | tr -d '\n' > $(MASTER_KEY_FILE)
	@echo "Updated master key in $(MASTER_KEY_FILE)"
	@echo "Updating master key in shared header..."
	@awk -v key="$$(cat $(MASTER_KEY_FILE))" '{ if ($$0 ~ /^#define ZYPHER_MASTER_KEY/) print "#define ZYPHER_MASTER_KEY \"" key "\""; else print $$0; }' $(SHARED_HEADER) > $(SHARED_HEADER).tmp && mv $(SHARED_HEADER).tmp $(SHARED_HEADER)

# Rule for building object files
$(BUILDDIR)/%.o: $(SRCDIR)/%.c $(INCLUDEDIR)/zypher_encoder.h $(SHARED_HEADER)
	$(CC) $(CFLAGS) -c $< -o $@

# Rule for building the target executable
$(TARGET): $(OBJECTS)
	$(CC) $^ -o $@ $(LDFLAGS)

clean:
	rm -rf $(BUILDDIR)/*.o $(TARGET)

.PHONY: all clean update_master_key